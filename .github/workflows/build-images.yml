name: Build All Images CI

on:
  push:
    branches: [ 'dev-**', master ]
    tags: [ '**' ]
  pull_request:
    branches: [ master ]

jobs:

  build_docker:

    name: Build Docker Image
    runs-on: ubuntu-latest

    steps:
    # Fetch shallow git repository
    - name: Checkout
      uses: actions/checkout@v2

    # Use QEMU to build for other arch
    - name: Set up QEMU
      if: success()
      id: qemu
      uses: docker/setup-qemu-action@v1
      with:
        image: tonistiigi/binfmt:latest
        platforms: all

    # Use docker buildx to build the docker image
    - name: Build the Docker image
      uses: docker/setup-buildx-action@v1
      if: success()
      id: buildx
      with:
        version: latest

    # List available build platforms
    - name: Available platforms
      if: success()
      run: echo ${{ steps.buildx.outputs.platforms }}

    # Generate 'prepare' build arguments to be retrieved later on
    - name: Prepare
      if: success()
      id: prepare
      run: |
        echo  "GITHUB_REF:${GITHUB_REF}"
        echo  "GITHUB_REPOSITORY:${GITHUB_REPOSITORY}"
        DOCKER_IMAGE=docker.io/josh5/ffmpeg
        VERSION_TAG=${GITHUB_REF#refs/*/}

        # Read versions from file
        . ./versions.cfg
        echo ::set-output name=docker_FFMPEG_VERSION::${FFMPEG_VERSION}
        echo ::set-output name=docker_FONTCONFIG::${FONTCONFIG}
        echo ::set-output name=docker_KVAZAAR::${KVAZAAR}
        echo ::set-output name=docker_LAME::${LAME}
        echo ::set-output name=docker_LIBAOM::${LIBAOM}
        echo ::set-output name=docker_LIBASS::${LIBASS}
        echo ::set-output name=docker_LIBDAV1D::${LIBDAV1D}
        echo ::set-output name=docker_LIBDRM::${LIBDRM}
        echo ::set-output name=docker_LIBFDKAAC::${LIBFDKAAC}
        echo ::set-output name=docker_LIBFREETYPE::${LIBFREETYPE}
        echo ::set-output name=docker_LIBFRIBIDI::${LIBFRIBIDI}
        echo ::set-output name=docker_LIBVA::${LIBVA}
        echo ::set-output name=docker_LIBVDPAU::${LIBVDPAU}
        echo ::set-output name=docker_LIBVIDSTAB::${LIBVIDSTAB}
        echo ::set-output name=docker_LIBVMAF::${LIBVMAF}
        echo ::set-output name=docker_LIBVOAMRWBENC::${LIBVOAMRWBENC}
        echo ::set-output name=docker_LIBWEBP::${LIBWEBP}
        echo ::set-output name=docker_NASM::${NASM}
        echo ::set-output name=docker_NVCODEC::${NVCODEC}
        echo ::set-output name=docker_OGG::${OGG}
        echo ::set-output name=docker_OPENCOREAMR::${OPENCOREAMR}
        echo ::set-output name=docker_OPENJPEG::${OPENJPEG}
        echo ::set-output name=docker_OPUS::${OPUS}
        echo ::set-output name=docker_SOXR::${SOXR}
        echo ::set-output name=docker_SPEEX::${SPEEX}
        echo ::set-output name=docker_THEORA::${THEORA}
        echo ::set-output name=docker_VORBIS::${VORBIS}
        echo ::set-output name=docker_VPX::${VPX}
        echo ::set-output name=docker_X264::${X264}
        echo ::set-output name=docker_X265::${X265}
        echo ::set-output name=docker_XVID::${XVID}
        echo ::set-output name=docker_ZIMG::${ZIMG}

        DOCKER_TAGS=""
        if [[ ${VERSION_TAG%/merge} == 'master' ]]; then
          DOCKER_TAGS="${DOCKER_TAGS}${DOCKER_IMAGE}:${FFMPEG_VERSION}-$(git rev-parse --short HEAD),"
          DOCKER_TAGS="${DOCKER_TAGS}${DOCKER_IMAGE}:latest,"
        elif [[ ${VERSION_TAG%/merge} =~ "dev-"* ]]; then
          DOCKER_TAGS="${DOCKER_TAGS}${DOCKER_IMAGE}:${VERSION_TAG%/merge},"
        fi

        DOCKER_PUSH="true"
        if [[ ${DOCKER_IMAGE} != 'docker.io/josh5/ffmpeg' ]]; then
          DOCKER_PUSH="false"
        fi
        if [[ ${VERSION_TAG%/merge} =~ ^[0-9]+$ ]]; then
          DOCKER_PUSH="false"
        fi

        echo ::set-output name=branch::${DOCKER_IMAGE}
        echo ::set-output name=docker_image::${DOCKER_IMAGE}
        echo ::set-output name=docker_tags::$(echo ${DOCKER_TAGS} | sed 's/,$//')
        echo ::set-output name=docker_platforms::linux/amd64
        echo ::set-output name=docker_push::${DOCKER_PUSH}
        echo ::set-output name=docker_build_date::$(date '+%Y-%m-%dT%H:%M:%S%:z')

    # Cache the build
    - name: Cache Docker layers
      uses: actions/cache@v2
      id: cache
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.ref }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    # Login to Docker Hub
    - name: Login to Docker Hub
      if: success()
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    # Run docker build and push
    - name: Docker Build and Push
      if: success()
      uses: docker/build-push-action@v2
      with:
        context: .
        file: Dockerfile
        build-args: |
          BUILD_DATE=${{ steps.prepare.outputs.docker_build_date }}
          FFMPEG_VERSION=${{ steps.prepare.outputs.docker_FFMPEG_VERSION }}
          FONTCONFIG=${{ steps.prepare.outputs.docker_FONTCONFIG }}
          KVAZAAR=${{ steps.prepare.outputs.docker_KVAZAAR }}
          LAME=${{ steps.prepare.outputs.docker_LAME }}
          LIBAOM=${{ steps.prepare.outputs.docker_LIBAOM }}
          LIBASS=${{ steps.prepare.outputs.docker_LIBASS }}
          LIBDAV1D=${{ steps.prepare.outputs.docker_LIBDAV1D }}
          LIBDRM=${{ steps.prepare.outputs.docker_LIBDRM }}
          LIBFDKAAC=${{ steps.prepare.outputs.docker_LIBFDKAAC }}
          LIBFREETYPE=${{ steps.prepare.outputs.docker_LIBFREETYPE }}
          LIBFRIBIDI=${{ steps.prepare.outputs.docker_LIBFRIBIDI }}
          LIBVA=${{ steps.prepare.outputs.docker_LIBVA }}
          LIBVDPAU=${{ steps.prepare.outputs.docker_LIBVDPAU }}
          LIBVIDSTAB=${{ steps.prepare.outputs.docker_LIBVIDSTAB }}
          LIBVMAF=${{ steps.prepare.outputs.docker_LIBVMAF }}
          LIBVOAMRWBENC=${{ steps.prepare.outputs.docker_LIBVOAMRWBENC }}
          LIBWEBP=${{ steps.prepare.outputs.docker_LIBWEBP }}
          NASM=${{ steps.prepare.outputs.docker_NASM }}
          NVCODEC=${{ steps.prepare.outputs.docker_NVCODEC }}
          OGG=${{ steps.prepare.outputs.docker_OGG }}
          OPENCOREAMR=${{ steps.prepare.outputs.docker_OPENCOREAMR }}
          OPENJPEG=${{ steps.prepare.outputs.docker_OPENJPEG }}
          OPUS=${{ steps.prepare.outputs.docker_OPUS }}
          SOXR=${{ steps.prepare.outputs.docker_SOXR }}
          SPEEX=${{ steps.prepare.outputs.docker_SPEEX }}
          THEORA=${{ steps.prepare.outputs.docker_THEORA }}
          VORBIS=${{ steps.prepare.outputs.docker_VORBIS }}
          VPX=${{ steps.prepare.outputs.docker_VPX }}
          X264=${{ steps.prepare.outputs.docker_X264 }}
          X265=${{ steps.prepare.outputs.docker_X265 }}
          XVID=${{ steps.prepare.outputs.docker_XVID }}
          ZIMG=${{ steps.prepare.outputs.docker_ZIMG }}

        platforms: ${{ steps.prepare.outputs.docker_platforms }}
        push: ${{ steps.prepare.outputs.docker_push }}
        tags: |
          ${{ steps.prepare.outputs.docker_tags }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
    
    # Keep only latest cache
    #   https://github.com/docker/build-push-action/issues/252
    #   https://github.com/moby/buildkit/issues/1896
    - name: Move cache
      if: always()
      run: |
        if [[ -e /tmp/.buildx-cache-new ]]; then
          echo "Cleaning up old cache..."
          rm -rf /tmp/.buildx-cache
          mv -v /tmp/.buildx-cache-new /tmp/.buildx-cache
        fi
